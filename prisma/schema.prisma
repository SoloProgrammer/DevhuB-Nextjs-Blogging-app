// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  password      String?
  emailVerified Boolean?
  image         String?   @default("https://res.cloudinary.com/dvzjzf36i/image/upload/v1679814483/wxrvucwq93ovrswfpsk3.png")
  bio           String?
  accounts      Account[]
  sessions      Session[]
  subscribers   String[]
  followers     String[]
  following     String[]
  savedPosts    String[]
  Post          Post[]
  Comment       Comment[]
  Reply         Reply[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String    @id @default(cuid()) @map("_id")
  slug          String    @unique
  title         String
  desc          String
  img           String?
  views         Int       @default(0)
  isFeatured    Boolean   @default(false)
  commentsCount Int       @default(0)
  createdAt     DateTime  @default(now())
  userEmail     String
  user          User      @relation(fields: [userEmail], references: [email])
  reactions     Json      @default("{}")
  comments      Comment[]
  tags          PostTag[]
}

model Tag {
  id    String    @id @default(cuid()) @map("_id")
  slug  String    @unique
  title String
  desc  String
  clr   String
  icon  String?
  posts PostTag[]
}

model PostTag {
  id       String @id @default(cuid()) @map("_id")
  post     Post   @relation(fields: [postSlug], references: [slug])
  postSlug String
  tag      Tag    @relation(fields: [tagSlug], references: [slug])
  tagSlug  String
}

model Comment {
  id         String   @id @default(cuid()) @map("_id")
  createdAt  DateTime @default(now())
  desc       String
  userEmail  String
  postSlug   String
  replyCount Int      @default(0)
  post       Post     @relation(fields: [postSlug], references: [slug])
  user       User     @relation(fields: [userEmail], references: [email])
  replies    Reply[]  @relation("commentReplies")
}

model Reply {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation("commentReplies", fields: [commentId], references: [id])
}
